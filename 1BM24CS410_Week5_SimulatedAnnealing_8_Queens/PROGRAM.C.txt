import random
import math

def print_board(board):
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            if board[row] == col:
                line += " Q "
            else:
                line += " . "
        print(line)
    print("\n")

def calculate_cost(board):
    """Number of pairs of queens attacking each other"""
    cost = 0
    n = len(board)
    for i in range(n):
        for j in range(i + 1, n):
            if board[i] == board[j] or abs(board[i]-board[j]) == j-i:
                cost += 1
    return cost

def simulated_annealing(n, temp=100, cooling_rate=0.95, min_temp=0.1):
    board = [random.randint(0, n-1) for _ in range(n)]
    steps = 0

    while temp > min_temp:
        current_cost = calculate_cost(board)
        if current_cost == 0:
            print(f"Goal state reached in {steps} steps!")
            print_board(board)
            return board

        # Random neighbor
        row = random.randint(0, n-1)
        col = random.randint(0, n-1)
        neighbor = board.copy()
        neighbor[row] = col
        neighbor_cost = calculate_cost(neighbor)

        # Accept neighbor if better or with probability
        delta = current_cost - neighbor_cost
        if delta > 0 or random.uniform(0,1) < math.exp(delta / temp):
            board = neighbor
        temp *= cooling_rate
        steps += 1

    print("Simulated Annealing finished without finding exact solution.")
    print_board(board)
    return board

# Run Simulated Annealing for 8-Queens
simulated_annealing(8)
