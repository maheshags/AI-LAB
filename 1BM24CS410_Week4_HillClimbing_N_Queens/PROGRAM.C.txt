import random

def print_board(board):
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            if board[row] == col:
                line += " Q "
            else:
                line += " . "
        print(line)
    print("\n")

def calculate_cost(board):
    """Number of pairs of queens attacking each other"""
    cost = 0
    n = len(board)
    for i in range(n):
        for j in range(i + 1, n):
            if board[i] == board[j] or abs(board[i]-board[j]) == j-i:
                cost += 1
    return cost

def hill_climbing(n):
    # Random initial state
    board = [random.randint(0, n-1) for _ in range(n)]
    steps = 0

    while True:
        current_cost = calculate_cost(board)
        if current_cost == 0:
            print(f"Goal state reached in {steps} steps!")
            print_board(board)
            return board

        # Generate neighbors
        neighbors = []
        for row in range(n):
            for col in range(n):
                if board[row] != col:
                    neighbor = board.copy()
                    neighbor[row] = col
                    neighbors.append(neighbor)

        # Choose neighbor with minimum cost
        costs = [calculate_cost(neighbor) for neighbor in neighbors]
        min_cost = min(costs)
        if min_cost >= current_cost:
            # Local maxima reached
            print("Local maxima reached. Restarting...")
            board = [random.randint(0, n-1) for _ in range(n)]
            steps = 0
        else:
            # Move to better neighbor
            board = neighbors[costs.index(min_cost)]
            steps += 1

# Run Hill Climbing for 4-Queens
hill_climbing(4)
