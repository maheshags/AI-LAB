import heapq

def manhattan_distance(state, goal):
    distance = 0
    for tile in range(1, 9):
        x1, y1 = divmod(state.index(tile), 3)
        x2, y2 = divmod(goal.index(tile), 3)
        distance += abs(x1 - x2) + abs(y1 - y2)
    return distance

def get_neighbors(state):
    neighbors = []
    idx = state.index(0)
    x, y = divmod(idx, 3)
    moves = [(-1,0),(1,0),(0,-1),(0,1)]
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_idx = nx * 3 + ny
            new_state = list(state)
            new_state[idx], new_state[new_idx] = new_state[new_idx], new_state[idx]
            neighbors.append(tuple(new_state))
    return neighbors

def a_star(start, goal):
    open_set = []
    heapq.heappush(open_set, (0, start))
    g = {start: 0}
    parent = {start: None}
    while open_set:
        f, current = heapq.heappop(open_set)
        if current == goal:
            return reconstruct_path(parent, current)
        for neighbor in get_neighbors(current):
            tentative_g = g[current] + 1
            if neighbor not in g or tentative_g < g[neighbor]:
                g[neighbor] = tentative_g
                h = manhattan_distance(neighbor, goal)
                f = tentative_g + h
                parent[neighbor] = current
                heapq.heappush(open_set, (f, neighbor))
    return None

def reconstruct_path(parent, state):
    path = []
    while state is not None:
        path.append(state)
        state = parent[state]
    return path[::-1]

def print_table_path(path):
    for step, state in enumerate(path):
        print(f"Step {step}:")
        for i in range(0, 9, 3):
            row = [" " if x == 0 else str(x) for x in state[i:i+3]]
            print(" | ".join(row))
        print("-" * 9)

if __name__ == "__main__":
    start_state = (1, 2, 3,
                   4, 0, 6,
                   7, 5, 8)

    goal_state = (1, 2, 3,
                  4, 5, 6,
                  7, 8, 0)

    print("A* with Manhattan Distance:")
    path = a_star(start_state, goal_state)
    print_table_path(path)
    print("Total Steps:", len(path) - 1)
